# Consolidated CI/CD Pipeline
# This workflow handles all quality checks, builds, and deployments
# Replaces: ci.yml, nextjs.yml, pr-validation.yml

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Sets permissions for all operations
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write
  issues: write

# Allow only one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Quality Checks - Runs on every PR and push
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run TypeScript type check
        run: yarn type-check

      - name: Check code formatting
        run: yarn format:check

      # - name: Run tests
      #   run: yarn test

      # - name: Generate test coverage report
      #   run: yarn test --coverage --coverageReporters=text-lcov | coveralls
      #   env:
      #     COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN || '' }}
      #   continue-on-error: true

  # Security Audit - Runs on every PR and push
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js 22
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level moderate
        continue-on-error: true

      - name: Run dependency check
        run: yarn outdated
        continue-on-error: true

  # Build Job - Only runs after quality checks pass
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js 22
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-nextjs-

      - name: Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          echo "Build output contents:"
          ls -la ./out || echo "No ./out directory found"
          echo "Checking if build succeeded..."

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: ./out
          retention-days: 7
        if: always()

  # Performance Testing - Only on PRs
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./out
        continue-on-error: true

      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded artifacts contents:"
          ls -la ./out || echo "No ./out directory found after download"
          echo "Checking if artifacts were downloaded successfully..."

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}
        continue-on-error: true

  # Deploy to GitHub Pages - Only on main branch
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-checks, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./out
        continue-on-error: true

      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded artifacts contents:"
          ls -la ./out || echo "No ./out directory found after download"
          echo "Checking if artifacts were downloaded successfully..."

      - name: Setup Node.js 22 (for fallback build)
        if: steps.download-artifacts.outcome != 'success'
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'

      - name: Fallback build if artifacts missing
        if: steps.download-artifacts.outcome != 'success'
        run: |
          echo "Artifacts not available, building locally..."
          yarn install --frozen-lockfile
          yarn build
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # PR Validation Summary - Only on PRs
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security, build, performance]
    if: github.event_name == 'pull_request'

    permissions:
      pull-requests: write
      issues: write

    steps:
      - name: Check for TODO/FIXME comments
        run: |
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | wc -l)
          echo "Found $TODO_COUNT TODO/FIXME comments"
          if [ $TODO_COUNT -gt 10 ]; then
            echo "⚠️ High number of TODO/FIXME comments found"
          fi
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('## PR Validation Results')
              );
              
              const body = `## PR Validation Results ✅
              
              **Status**: All checks passed
              
              **Details**:
              - ✅ Linting: Passed
              - ✅ Type checking: Passed  
              - ✅ Security audit: Passed
              - ✅ Build: Successful
              - ✅ Performance tests: Completed
              
              **Next Steps**:
              - Review the changes
              - Merge when ready
              `;
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: body
                });
                console.log('Updated existing PR comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('Created new PR comment');
              }
            } catch (error) {
              console.log('Failed to comment on PR:', error.message);
              console.log('This is not critical - the validation checks still passed');
            }
