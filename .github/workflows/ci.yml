name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint, Type Check, and Test Job
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run ESLint
        run: yarn lint
        
      - name: Run TypeScript type check
        run: yarn type-check
        
      # - name: Run tests
      #   run: yarn test
        
      # - name: Generate test coverage report
      #   run: yarn test --coverage --coverageReporters=text-lcov | coveralls
      #   env:
      #     COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN || '' }}
      #   continue-on-error: true

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build application
        run: yarn build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Security Audit Job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run security audit
        run: yarn audit --level moderate
        continue-on-error: true
        
      - name: Run dependency check
        run: yarn outdated
        continue-on-error: true

  # # Deploy to Railway Production (if on main branch)
  # deploy-railway:
  #   name: Deploy to Railway
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: 
  #     name: production
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Setup Node.js 22
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #         cache: 'yarn'
          
  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
        
  #     - name: Build application
  #       run: yarn build
        
  #     - name: Install Railway CLI
  #       run: npm install -g @railway/cli@latest
        
  #     - name: Login to Railway
  #       run: railway login --token ${{ secrets.RAILWAY_TOKEN }}
        
  #     - name: Set Railway project
  #       run: railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        
  #     - name: Check if database exists
  #       id: db_check
  #       run: |
  #         if railway run --service database "psql ${{ secrets.RAILWAY_DATABASE_URL }} -c 'SELECT 1;'" 2>/dev/null; then
  #           echo "db_exists=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "db_exists=false" >> $GITHUB_OUTPUT
  #         fi
  #       continue-on-error: true
        
  #     - name: Initialize Database (First Deploy)
  #       if: steps.db_check.outputs.db_exists == 'false'
  #       run: |
  #         echo "ðŸš€ Initializing database..."
  #         railway run --service app "npx prisma migrate deploy"
  #         railway run --service app "npx prisma generate"
  #         railway run --service app "npx prisma db seed"
          
  #     - name: Run Migrations (Subsequent Deploys)
  #       if: steps.db_check.outputs.db_exists == 'true'
  #       run: |
  #         echo "ðŸ”„ Running migrations..."
  #         railway run --service app "npx prisma generate"
  #         railway run --service app "npx prisma migrate deploy"
          
  #     - name: Deploy to Railway
  #       run: |
  #         echo "ðŸš€ Deploying to Railway..."
  #         railway variables set NODE_ENV=production
  #         railway variables set NEXTAUTH_URL=${{ secrets.RAILWAY_NEXTAUTH_URL }}
  #         railway variables set NEXTAUTH_SECRET=${{ secrets.RAILWAY_NEXTAUTH_SECRET }}
  #         railway variables set DATABASE_URL=${{ secrets.RAILWAY_DATABASE_URL }}
  #         railway up --service app

  # Performance Testing (optional)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build application
        run: yarn build
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}
        continue-on-error: true

  # Database Migration Check (if Prisma is used)
  database:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'prisma/schema.prisma') || contains(github.event.head_commit.added, 'prisma/schema.prisma') || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: barbershop_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run database migrations
        run: yarn prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/barbershop_test
          
      - name: Generate Prisma client
        run: yarn prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/barbershop_test
